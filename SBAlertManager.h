/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: (null)
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "SBWindowContextManagerDelegate.h"
#import "SBWindowContextHostManagerDelegate.h"
#import "SBAlertDelegate.h"

@class SBWindowContextManager, NSMutableSet, SBAlertWindow, SBWindowContextHostManager, NSMapTable, NSMutableArray, UIScreen;
@protocol SBAlertManagerDelegate;

__attribute__((visibility("hidden")))
@interface SBAlertManager : XXUnknownSuperclass <SBAlertDelegate, SBWindowContextManagerDelegate, SBWindowContextHostManagerDelegate> {
	UIScreen* _screen;
	SBAlertWindow* _alertWindow;
	SBAlertWindow* _deferredAlertWindow;
	SBAlertWindow* _lockAlertWindow;
	NSMutableArray* _alerts;
	NSMapTable* _observers;
	NSMutableSet* _removalPendingAlerts;
	BOOL _deactivatingAllAlerts;
	id<SBAlertManagerDelegate> _delegate;
	SBWindowContextManager* _contextManager;
	SBWindowContextHostManager* _contextHostManager;
	struct {
		unsigned delegateOverrideRequester : 1;
		unsigned delegateShouldEnableContextHostingForRequester : 1;
	} _delegateFlags;
}
@property(assign, nonatomic) id<SBAlertManagerDelegate> delegate;
@property(readonly, retain) UIScreen* screen;
@property(readonly, retain) SBWindowContextHostManager* contextHostManager;
-(void)windowContextManager:(id)manager didStopTrackingContextsForScreen:(id)screen;
-(void)windowContextManager:(id)manager willStartTrackingContextsForScreen:(id)screen;
-(BOOL)windowContextManager:(id)manager shouldAddContext:(id)context;
-(void)alertIsReadyToBeRemovedFromView:(id)view;
-(void)alertIsReadyToBeDeactivated:(id)beDeactivated;
-(void)alert:(id)alert requestsBackgroundStyleChangeWithAnimationFactory:(id)animationFactory;
-(void)_makeAlertWindowOpaque:(BOOL)opaque;
-(void)_resetAlertWindowOpacity;
-(void)_removeFromView:(id)view;
-(void)_deactivate:(id)deactivate;
-(void)_activate:(id)activate;
-(void)removeObserver:(id)observer;
-(void)addObserver:(id)observer;
-(id)debugDescription;
-(id)description;
-(void)applicationFinishedAnimatingBeneathAlert;
-(void)applicationWillAnimateActivation;
-(void)deactivateAlertsAfterLaunch;
-(void)setAlertsShouldDeactivateAfterLaunch;
-(void)deactivateAll;
-(void)deactivate:(id)deactivate;
-(void)activate:(id)activate;
-(id)allAlerts;
-(BOOL)containsAlert:(id)alert;
-(id)stackedAlertsIncludingActiveAlert:(BOOL)alert;
-(BOOL)hasStackedAlerts;
-(id)activeAlert;
-(id)windows;
-(id)windowForAlert:(id)alert;
-(id)activeAlertWindow;
-(id)topMostWindow;
-(void)dealloc;
-(id)init;
-(id)initWithScreen:(id)screen;
@end

